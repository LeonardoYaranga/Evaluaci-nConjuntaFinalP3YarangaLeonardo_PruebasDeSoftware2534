// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReqnrollTestProject.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ClienteCrudFeature : object, Xunit.IClassFixture<ClienteCrudFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ClienteCrud", "    CRUD sobre Clientes\r\n    Para gestionar los datos de los clientes de manera e" +
                "fectiva", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ClienteCrud.feature"
#line hidden
        
        public ClienteCrudFeature(ClienteCrudFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Crear un nuevo Cliente Valido")]
        [Xunit.TraitAttribute("FeatureTitle", "ClienteCrud")]
        [Xunit.TraitAttribute("Description", "Crear un nuevo Cliente Valido")]
        [Xunit.TraitAttribute("Category", "create")]
        public async System.Threading.Tasks.Task CrearUnNuevoClienteValido()
        {
            string[] tagsOfScenario = new string[] {
                    "create"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Crear un nuevo Cliente Valido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await testRunner.GivenAsync("voy a la página de Crear en \"http://localhost:5051/Cliente/Create\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Nombres",
                            "Apellidos",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table1.AddRow(new string[] {
                            "1726781402",
                            "Leo",
                            "Perez",
                            "1990-05-15",
                            "leoP@gmail.com",
                            "0977654321",
                            "Calle A",
                            "true"});
#line 9
    await testRunner.WhenAsync("ingreso los siguientes detalles del cliente", ((string)(null)), table1, "When ");
#line hidden
#line 12
    await testRunner.AndAsync("envío el formulario de creación", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
    await testRunner.ThenAsync("debo ser redirigido a la lista de Clientes en \"http://localhost:5051/Cliente\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Nombres",
                            "Apellidos",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table2.AddRow(new string[] {
                            "1726781402",
                            "Leo",
                            "Perez",
                            "1990-05-15",
                            "leoP@gmail.com",
                            "0977654321",
                            "Calle A",
                            "true"});
#line 14
 await testRunner.AndAsync("los datos en el ultimo registro deben ser iguales a los ingresados", ((string)(null)), table2, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Crear un nuevo Cliente con Cedula Invalida")]
        [Xunit.TraitAttribute("FeatureTitle", "ClienteCrud")]
        [Xunit.TraitAttribute("Description", "Crear un nuevo Cliente con Cedula Invalida")]
        [Xunit.TraitAttribute("Category", "create")]
        public async System.Threading.Tasks.Task CrearUnNuevoClienteConCedulaInvalida()
        {
            string[] tagsOfScenario = new string[] {
                    "create"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Crear un nuevo Cliente con Cedula Invalida", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 20
    await testRunner.GivenAsync("voy a la página de Crear en \"http://localhost:5051/Cliente/Create\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Nombres",
                            "Apellidos",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table3.AddRow(new string[] {
                            "1234567890",
                            "Juan",
                            "Perez",
                            "1990-05-15",
                            "leoP@gmail.com",
                            "0995879641",
                            "Calle 123",
                            "true"});
#line 21
    await testRunner.WhenAsync("ingreso los siguientes detalles del cliente", ((string)(null)), table3, "When ");
#line hidden
#line 24
    await testRunner.AndAsync("envío el formulario de creación", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
    await testRunner.ThenAsync("debo ver un mensaje de error \"Error: La Cedula no es valida.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Intentar actualizar un Cliente con Cedula Invalida")]
        [Xunit.TraitAttribute("FeatureTitle", "ClienteCrud")]
        [Xunit.TraitAttribute("Description", "Intentar actualizar un Cliente con Cedula Invalida")]
        [Xunit.TraitAttribute("Category", "update")]
        public async System.Threading.Tasks.Task IntentarActualizarUnClienteConCedulaInvalida()
        {
            string[] tagsOfScenario = new string[] {
                    "update"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Intentar actualizar un Cliente con Cedula Invalida", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 29
    await testRunner.GivenAsync("hay un cliente existente con ID \"3\" en \"http://localhost:5051/Cliente/Edit/3\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Nombres",
                            "Apellidos",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table4.AddRow(new string[] {
                            "1234567890",
                            "Juan",
                            "Perez",
                            "1990-05-15",
                            "juan@example.com",
                            "0995878641",
                            "Calle 123",
                            "true"});
#line 30
    await testRunner.WhenAsync("ingreso los siguientes detalles del cliente", ((string)(null)), table4, "When ");
#line hidden
#line 33
    await testRunner.AndAsync("envío el formulario de edición", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
    await testRunner.ThenAsync("debo ver un mensaje de error \"Error: La Cedula no es valida.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Intentar actualizar un usuario con campos vacios")]
        [Xunit.TraitAttribute("FeatureTitle", "ClienteCrud")]
        [Xunit.TraitAttribute("Description", "Intentar actualizar un usuario con campos vacios")]
        [Xunit.TraitAttribute("Category", "update2")]
        public async System.Threading.Tasks.Task IntentarActualizarUnUsuarioConCamposVacios()
        {
            string[] tagsOfScenario = new string[] {
                    "update2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Intentar actualizar un usuario con campos vacios", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 38
await testRunner.GivenAsync("hay un cliente existente con ID \"3\" en \"http://localhost:5051/Cliente/Edit/3\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Nombres",
                            "Apellidos",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table5.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 39
    await testRunner.WhenAsync("ingreso los siguientes detalles del cliente", ((string)(null)), table5, "When ");
#line hidden
#line 42
    await testRunner.AndAsync("envío el formulario de edición", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
    await testRunner.ThenAsync("debo ver un mensaje de error de campo vacio \"La cédula es obligatoria.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Actualizar un Cliente correctamente")]
        [Xunit.TraitAttribute("FeatureTitle", "ClienteCrud")]
        [Xunit.TraitAttribute("Description", "Actualizar un Cliente correctamente")]
        [Xunit.TraitAttribute("Category", "updateCorrecto")]
        public async System.Threading.Tasks.Task ActualizarUnClienteCorrectamente()
        {
            string[] tagsOfScenario = new string[] {
                    "updateCorrecto"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Actualizar un Cliente correctamente", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 47
    await testRunner.GivenAsync("hay un cliente existente con ID \"3\" en \"http://localhost:5051/Cliente/Edit/3\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Nombres",
                            "Apellidos",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table6.AddRow(new string[] {
                            "1100848835",
                            "Raul",
                            "Editado",
                            "1990-12-25",
                            "luis.martinez@mail.com",
                            "0965544332",
                            "Centro de la Ciudad",
                            "true"});
#line 48
    await testRunner.WhenAsync("ingreso los siguientes detalles del cliente", ((string)(null)), table6, "When ");
#line hidden
#line 51
    await testRunner.AndAsync("envío el formulario de edición", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
    await testRunner.ThenAsync("debo ser redirigido a la lista de Clientes en \"http://localhost:5051/Cliente\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Cedula",
                            "Nombres",
                            "Apellidos",
                            "FechaNacimiento",
                            "Mail",
                            "Telefono",
                            "Direccion",
                            "Estado"});
                table7.AddRow(new string[] {
                            "1100848835",
                            "Raul",
                            "Editado",
                            "1990-12-25",
                            "luis.martinez@mail.com",
                            "0965544332",
                            "Centro de la Ciudad",
                            "true"});
#line 53
    await testRunner.AndAsync("los datos en el registro con ID \"3\" deben ser iguales a los ingresados", ((string)(null)), table7, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ClienteCrudFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ClienteCrudFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
