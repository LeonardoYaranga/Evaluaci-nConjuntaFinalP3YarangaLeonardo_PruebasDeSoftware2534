// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MoneyTrackerReqnroll.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class IngresoSistemaFeature : object, Xunit.IClassFixture<IngresoSistemaFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "IngresoSistema", "  Pruebas para la funcionalidad de ingreso al sistema en la aplicación web", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "IngresoSistema.feature"
#line hidden
        
        public IngresoSistemaFeature(IngresoSistemaFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingreso al sistema con correo válido")]
        [Xunit.TraitAttribute("FeatureTitle", "IngresoSistema")]
        [Xunit.TraitAttribute("Description", "Ingreso al sistema con correo válido")]
        [Xunit.TraitAttribute("Category", "IS_001")]
        public async System.Threading.Tasks.Task IngresoAlSistemaConCorreoValido()
        {
            string[] tagsOfScenario = new string[] {
                    "IS_001"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso al sistema con correo válido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
  await testRunner.GivenAsync("El usuario se encuentra en la página principal.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table27 = new global::Reqnroll.Table(new string[] {
                            "Correo",
                            "Contraseña"});
                table27.AddRow(new string[] {
                            "di_rivera78@gmail.com",
                            "diego123"});
#line 8
  await testRunner.WhenAsync("El usuario ingresa su correo y contraseña.", ((string)(null)), table27, "When ");
#line hidden
#line 11
  await testRunner.AndAsync("El usuario hace clic en el botón \"Iniciar Sesión\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
  await testRunner.ThenAsync("El usuario debería ser redirigido al apartado Home con la URL \"http://localhost:3" +
                        "000/main/home\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingreso al sistema con formulario vacío")]
        [Xunit.TraitAttribute("FeatureTitle", "IngresoSistema")]
        [Xunit.TraitAttribute("Description", "Ingreso al sistema con formulario vacío")]
        [Xunit.TraitAttribute("Category", "IS_002")]
        public async System.Threading.Tasks.Task IngresoAlSistemaConFormularioVacio()
        {
            string[] tagsOfScenario = new string[] {
                    "IS_002"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso al sistema con formulario vacío", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
  await testRunner.GivenAsync("El usuario se encuentra en la página principal.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table28 = new global::Reqnroll.Table(new string[] {
                            "Correo",
                            "Contraseña"});
                table28.AddRow(new string[] {
                            "",
                            ""});
#line 17
  await testRunner.WhenAsync("El usuario ingresa su correo y contraseña.", ((string)(null)), table28, "When ");
#line hidden
#line 20
  await testRunner.AndAsync("El usuario hace clic en el botón \"Iniciar Sesión\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
  await testRunner.ThenAsync("El campo de correo muestra una validación HTML \"Please fill out this field\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingreso al sistema con contraseña incorrecta y correo correcto")]
        [Xunit.TraitAttribute("FeatureTitle", "IngresoSistema")]
        [Xunit.TraitAttribute("Description", "Ingreso al sistema con contraseña incorrecta y correo correcto")]
        [Xunit.TraitAttribute("Category", "IS_003")]
        public async System.Threading.Tasks.Task IngresoAlSistemaConContrasenaIncorrectaYCorreoCorrecto()
        {
            string[] tagsOfScenario = new string[] {
                    "IS_003"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso al sistema con contraseña incorrecta y correo correcto", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 25
  await testRunner.GivenAsync("El usuario se encuentra en la página principal.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                            "Correo",
                            "Contraseña"});
                table29.AddRow(new string[] {
                            "di_rivera78@gmail.com",
                            "wwwww"});
#line 26
  await testRunner.WhenAsync("El usuario ingresa su correo y contraseña.", ((string)(null)), table29, "When ");
#line hidden
#line 29
  await testRunner.AndAsync("El usuario hace clic en el botón \"Iniciar Sesión\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
  await testRunner.ThenAsync("El sistema muestra un mensaje de error \"Password is incorrect\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingreso al sistema con correo incorrecto y contraseña correcta")]
        [Xunit.TraitAttribute("FeatureTitle", "IngresoSistema")]
        [Xunit.TraitAttribute("Description", "Ingreso al sistema con correo incorrecto y contraseña correcta")]
        [Xunit.TraitAttribute("Category", "IS_004")]
        public async System.Threading.Tasks.Task IngresoAlSistemaConCorreoIncorrectoYContrasenaCorrecta()
        {
            string[] tagsOfScenario = new string[] {
                    "IS_004"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso al sistema con correo incorrecto y contraseña correcta", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 34
  await testRunner.GivenAsync("El usuario se encuentra en la página principal.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table30 = new global::Reqnroll.Table(new string[] {
                            "Correo",
                            "Contraseña"});
                table30.AddRow(new string[] {
                            "di_rivera78gmailcom",
                            "diego123"});
#line 35
  await testRunner.WhenAsync("El usuario ingresa su correo y contraseña.", ((string)(null)), table30, "When ");
#line hidden
#line 38
  await testRunner.AndAsync("El usuario hace clic en el botón \"Iniciar Sesión\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
  await testRunner.ThenAsync("El campo de correo muestra una validación HTML \"Please include an \'@\' in the emai" +
                        "l address\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingreso al sistema con correo de más de 100 caracteres")]
        [Xunit.TraitAttribute("FeatureTitle", "IngresoSistema")]
        [Xunit.TraitAttribute("Description", "Ingreso al sistema con correo de más de 100 caracteres")]
        [Xunit.TraitAttribute("Category", "IS_005")]
        public async System.Threading.Tasks.Task IngresoAlSistemaConCorreoDeMasDe100Caracteres()
        {
            string[] tagsOfScenario = new string[] {
                    "IS_005"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso al sistema con correo de más de 100 caracteres", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 43
  await testRunner.GivenAsync("El usuario se encuentra en la página principal.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table31 = new global::Reqnroll.Table(new string[] {
                            "Correo",
                            "Contraseña"});
                table31.AddRow(new string[] {
                            "di_rivera789999999999999999999999999999999999999999999999999999999999999999999999" +
                                "999999999999999999999@gmail.com",
                            "diego123"});
#line 44
  await testRunner.WhenAsync("El usuario ingresa su correo y contraseña.", ((string)(null)), table31, "When ");
#line hidden
#line 47
  await testRunner.AndAsync("El usuario hace clic en el botón \"Iniciar Sesión\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
  await testRunner.ThenAsync("El sistema muestra un mensaje de error \"El correo no puede tener más de 100 carac" +
                        "teres\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingreso al sistema con correo vacío y contraseña correcta")]
        [Xunit.TraitAttribute("FeatureTitle", "IngresoSistema")]
        [Xunit.TraitAttribute("Description", "Ingreso al sistema con correo vacío y contraseña correcta")]
        [Xunit.TraitAttribute("Category", "IS_006")]
        public async System.Threading.Tasks.Task IngresoAlSistemaConCorreoVacioYContrasenaCorrecta()
        {
            string[] tagsOfScenario = new string[] {
                    "IS_006"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso al sistema con correo vacío y contraseña correcta", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
  await testRunner.GivenAsync("El usuario se encuentra en la página principal.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table32 = new global::Reqnroll.Table(new string[] {
                            "Correo",
                            "Contraseña"});
                table32.AddRow(new string[] {
                            "",
                            "diego123"});
#line 53
  await testRunner.WhenAsync("El usuario ingresa su correo y contraseña.", ((string)(null)), table32, "When ");
#line hidden
#line 56
  await testRunner.AndAsync("El usuario hace clic en el botón \"Iniciar Sesión\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
  await testRunner.ThenAsync("El campo de correo muestra una validación HTML \"Please fill out this field\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingreso al sistema con correo correcto y contraseña vacía")]
        [Xunit.TraitAttribute("FeatureTitle", "IngresoSistema")]
        [Xunit.TraitAttribute("Description", "Ingreso al sistema con correo correcto y contraseña vacía")]
        [Xunit.TraitAttribute("Category", "IS_007")]
        public async System.Threading.Tasks.Task IngresoAlSistemaConCorreoCorrectoYContrasenaVacia()
        {
            string[] tagsOfScenario = new string[] {
                    "IS_007"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso al sistema con correo correcto y contraseña vacía", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 61
  await testRunner.GivenAsync("El usuario se encuentra en la página principal.", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table33 = new global::Reqnroll.Table(new string[] {
                            "Correo",
                            "Contraseña"});
                table33.AddRow(new string[] {
                            "di_rivera78@gmail.com",
                            ""});
#line 62
  await testRunner.WhenAsync("El usuario ingresa su correo y contraseña.", ((string)(null)), table33, "When ");
#line hidden
#line 65
  await testRunner.AndAsync("El usuario hace clic en el botón \"Iniciar Sesión\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
  await testRunner.ThenAsync("El campo de contraseña muestra una validación HTML \"Please fill out this field\".", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await IngresoSistemaFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await IngresoSistemaFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
