// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MoneyTrackerReqnroll.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GestionNotificacionesFeature : object, Xunit.IClassFixture<GestionNotificacionesFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GestionNotificaciones", "  Como usuario del sistema de gestión financiera,\r\n  Quiero visualizar notificaci" +
                "ones de deudas pendientes próximas a vencer,\r\n  Para estar al tanto de mis oblig" +
                "aciones financieras y evitar retrasos en los pagos.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GestionNotificaciones.feature"
#line hidden
        
        public GestionNotificacionesFeature(GestionNotificacionesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Visualizar la notificación de una deuda que expira un día después")]
        [Xunit.TraitAttribute("FeatureTitle", "GestionNotificaciones")]
        [Xunit.TraitAttribute("Description", "Visualizar la notificación de una deuda que expira un día después")]
        [Xunit.TraitAttribute("Category", "GN_001")]
        public async System.Threading.Tasks.Task VisualizarLaNotificacionDeUnaDeudaQueExpiraUnDiaDespues()
        {
            string[] tagsOfScenario = new string[] {
                    "GN_001"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Visualizar la notificación de una deuda que expira un día después", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 9
  await testRunner.GivenAsync("El usuario está en la página principal después de iniciar sesión", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Nombre",
                            "Monto",
                            "TipoActividad",
                            "Descripción",
                            "FechaLimite",
                            "Estado"});
                table7.AddRow(new string[] {
                            "Pagar Genesita",
                            "20",
                            "Deuda a Pagar",
                            "Se le debe 20 a Genesita de la compra",
                            "24/02/2025",
                            "Pendiente"});
#line 10
  await testRunner.WhenAsync("El usuario llena el formulario de pago con datos válidos y fecha límite del día s" +
                        "iguiente", ((string)(null)), table7, "When ");
#line hidden
#line 13
  await testRunner.AndAsync("El usuario hace clic en el botón \"Guardar\" en pago", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
  await testRunner.AndAsync("El usuario abre la campana de notificaciones al día siguiente", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
  await testRunner.ThenAsync("El sistema debe mostrar una notificación de deuda pendiente con el mensaje \"Te qu" +
                        "edan 1 día(s) para saldar el pago Pagar Genesita\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No visualizar notificaciones de registros antiguos")]
        [Xunit.TraitAttribute("FeatureTitle", "GestionNotificaciones")]
        [Xunit.TraitAttribute("Description", "No visualizar notificaciones de registros antiguos")]
        [Xunit.TraitAttribute("Category", "GN_002")]
        public async System.Threading.Tasks.Task NoVisualizarNotificacionesDeRegistrosAntiguos()
        {
            string[] tagsOfScenario = new string[] {
                    "GN_002"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("No visualizar notificaciones de registros antiguos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
  await testRunner.GivenAsync("El usuario está en la página principal después de iniciar sesión", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 20
  await testRunner.WhenAsync("El usuario abre la campana de notificaciones", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
  await testRunner.ThenAsync("El sistema debe mostrar un mensaje de que no hay notificaciones pendientes si las" +
                        " fechas de pago ya pasaron", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await GestionNotificacionesFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await GestionNotificacionesFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
