// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MoneyTrackerReqnroll.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GestionDePagosFeature : object, Xunit.IClassFixture<GestionDePagosFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GestionDePagos", "Realización de pruebas de el apartado de gestión de pagos", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GestionDePagos.feature"
#line hidden
        
        public GestionDePagosFeature(GestionDePagosFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Crear pago tipo ingreso con datos correctos.")]
        [Xunit.TraitAttribute("FeatureTitle", "GestionDePagos")]
        [Xunit.TraitAttribute("Description", "Crear pago tipo ingreso con datos correctos.")]
        [Xunit.TraitAttribute("Category", "GP_001")]
        public async System.Threading.Tasks.Task CrearPagoTipoIngresoConDatosCorrectos_()
        {
            string[] tagsOfScenario = new string[] {
                    "GP_001"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Crear pago tipo ingreso con datos correctos.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("Estar en la página principal de la aplicación", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Nombre",
                            "Monto",
                            "TipoActividad",
                            "Descripción",
                            "Estado"});
                table4.AddRow(new string[] {
                            "Pago1",
                            "1000",
                            "Ingreso",
                            "Pago de renta",
                            "Pendiente"});
#line 8
 await testRunner.WhenAsync("El usuario llena el apartado del formulario con los datos", ((string)(null)), table4, "When ");
#line hidden
#line 11
 await testRunner.AndAsync("El usuario hace clic en el botón Guardar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.ThenAsync("El registro se hizo correctamente y se muestra un mensaje de éxito", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Crear pagos con campos vacios.")]
        [Xunit.TraitAttribute("FeatureTitle", "GestionDePagos")]
        [Xunit.TraitAttribute("Description", "Crear pagos con campos vacios.")]
        [Xunit.TraitAttribute("Category", "GP_002")]
        public async System.Threading.Tasks.Task CrearPagosConCamposVacios_()
        {
            string[] tagsOfScenario = new string[] {
                    "GP_002"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Crear pagos con campos vacios.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
 await testRunner.GivenAsync("Estar en la página principal de la aplicación", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Nombre",
                            "Monto",
                            "TipoActividad",
                            "Descripción",
                            "Estado"});
                table5.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 17
 await testRunner.WhenAsync("El usuario llena el apartado del formulario con datos vacios", ((string)(null)), table5, "When ");
#line hidden
#line 20
 await testRunner.ThenAsync("El sistema no debería habilitar el botón del Guardar el pago", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Crear pago tipo ingreso con monto negativo")]
        [Xunit.TraitAttribute("FeatureTitle", "GestionDePagos")]
        [Xunit.TraitAttribute("Description", "Crear pago tipo ingreso con monto negativo")]
        [Xunit.TraitAttribute("Category", "GP_003")]
        public async System.Threading.Tasks.Task CrearPagoTipoIngresoConMontoNegativo()
        {
            string[] tagsOfScenario = new string[] {
                    "GP_003"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Crear pago tipo ingreso con monto negativo", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 24
 await testRunner.GivenAsync("Estar en la página principal de la aplicación", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Nombre",
                            "Monto",
                            "TipoActividad",
                            "Descripción",
                            "Estado"});
                table6.AddRow(new string[] {
                            "Pago1",
                            "-30",
                            "Ingreso",
                            "Pago de renta",
                            "Pendiente"});
#line 25
 await testRunner.WhenAsync("El usuario llena el apartado del formulario con los datos", ((string)(null)), table6, "When ");
#line hidden
#line 28
 await testRunner.ThenAsync("El sistema deberá mostrar una alerta de que el monto no puede ser negativo", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Crear pago con nombre de más de 250 caracteres.")]
        [Xunit.TraitAttribute("FeatureTitle", "GestionDePagos")]
        [Xunit.TraitAttribute("Description", "Crear pago con nombre de más de 250 caracteres.")]
        [Xunit.TraitAttribute("Category", "GP_004")]
        public async System.Threading.Tasks.Task CrearPagoConNombreDeMaSDe250Caracteres_()
        {
            string[] tagsOfScenario = new string[] {
                    "GP_004"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Crear pago con nombre de más de 250 caracteres.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 32
 await testRunner.GivenAsync("Estar en la página principal de la aplicación", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 33
  await testRunner.WhenAsync("El usuario llena el apartado nombre con más de 250 caracteres \"G3zv9qL2m8YxFj6rT" +
                        "p0kQs1nH0WlVz5b7SgZk8A3o9yJ1UqH5tLrNpXjKwFg9k8mV2Tq3pO0sY6hCn7dMvFz5G1a1zKbHrYw3" +
                        "J6kZl1qXt5NcB9pV3u1tGz8dQ4b7Y3Kl9xTzJpL\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
 await testRunner.ThenAsync("El sistema deberá mostrar una alerta que indique que el nombre no debe superar u" +
                        "n limite de caracteres", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Editar pago con datos correctos")]
        [Xunit.TraitAttribute("FeatureTitle", "GestionDePagos")]
        [Xunit.TraitAttribute("Description", "Editar pago con datos correctos")]
        [Xunit.TraitAttribute("Category", "GP_005")]
        public async System.Threading.Tasks.Task EditarPagoConDatosCorrectos()
        {
            string[] tagsOfScenario = new string[] {
                    "GP_005"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Editar pago con datos correctos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 38
 await testRunner.GivenAsync("Estar en la página principal de la aplicación", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 39
 await testRunner.AndAsync("Dar click en el lapiz para editar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
 await testRunner.WhenAsync("El usuario modifica el dato nombre con \"Comida\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
 await testRunner.AndAsync("Da click en el botón \"Guardar\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
 await testRunner.ThenAsync("El sistema deberá mostrar un mensaje de éxito", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Editar pago con datos vacios")]
        [Xunit.TraitAttribute("FeatureTitle", "GestionDePagos")]
        [Xunit.TraitAttribute("Description", "Editar pago con datos vacios")]
        [Xunit.TraitAttribute("Category", "GP_006")]
        public async System.Threading.Tasks.Task EditarPagoConDatosVacios()
        {
            string[] tagsOfScenario = new string[] {
                    "GP_006"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Editar pago con datos vacios", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 46
 await testRunner.GivenAsync("Estar en la página principal de la aplicación", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 47
 await testRunner.AndAsync("Dar click en el lapiz para editar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
 await testRunner.WhenAsync("El usuario modifica el dato nombre con datos vacios \"\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 49
 await testRunner.ThenAsync("El sistema deberá mostrar el botón \"Guardar\" como deshabilitado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Eliminar pago existente en el sistema.")]
        [Xunit.TraitAttribute("FeatureTitle", "GestionDePagos")]
        [Xunit.TraitAttribute("Description", "Eliminar pago existente en el sistema.")]
        [Xunit.TraitAttribute("Category", "GP_007")]
        public async System.Threading.Tasks.Task EliminarPagoExistenteEnElSistema_()
        {
            string[] tagsOfScenario = new string[] {
                    "GP_007"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Eliminar pago existente en el sistema.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 53
 await testRunner.GivenAsync("Estar en la página principal de la aplicación", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 54
 await testRunner.AndAsync("Dar click en el ícono de papelera para eliminar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
 await testRunner.ThenAsync("El sistema deberá mostrar un botón de confirmación para eliminar el pago", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 56
 await testRunner.WhenAsync("El usuario da click en el botón de confirmación", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 57
 await testRunner.ThenAsync("El usuario deberá ser borrado", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await GestionDePagosFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await GestionDePagosFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
