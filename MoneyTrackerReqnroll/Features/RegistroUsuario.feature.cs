// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MoneyTrackerReqnroll.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegistroUsuarioFeature : object, Xunit.IClassFixture<RegistroUsuarioFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "RegistroUsuario", "  Pruebas para la funcionalidad de registro de usuarios en la aplicación web", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RegistroUsuario.feature"
#line hidden
        
        public RegistroUsuarioFeature(RegistroUsuarioFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de usuario con información válida")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistroUsuario")]
        [Xunit.TraitAttribute("Description", "Registro de usuario con información válida")]
        [Xunit.TraitAttribute("Category", "RU_001")]
        public async System.Threading.Tasks.Task RegistroDeUsuarioConInformacionValida()
        {
            string[] tagsOfScenario = new string[] {
                    "RU_001"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de usuario con información válida", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
  await testRunner.GivenAsync("El usuario se encuentra en la página principal", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
  await testRunner.WhenAsync("El usuario hace clic en el enlace \"Crea una nueva Cuenta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table34 = new global::Reqnroll.Table(new string[] {
                            "Nombre",
                            "Apellido",
                            "Correo",
                            "Contraseña",
                            "Confirmación"});
                table34.AddRow(new string[] {
                            "Diego",
                            "Rivera",
                            "di_rivera78@gmail.com",
                            "diego123",
                            "diego123"});
#line 9
  await testRunner.AndAsync("El usuario llena el formulario con", ((string)(null)), table34, "And ");
#line hidden
#line 12
  await testRunner.AndAsync("El usuario hace clic en el botón \"Crear Cuenta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
  await testRunner.ThenAsync("El sistema muestra un mensaje de éxito \"User created successfully\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de usuario con correo inválido")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistroUsuario")]
        [Xunit.TraitAttribute("Description", "Registro de usuario con correo inválido")]
        [Xunit.TraitAttribute("Category", "RU_002")]
        public async System.Threading.Tasks.Task RegistroDeUsuarioConCorreoInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "RU_002"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de usuario con correo inválido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 17
  await testRunner.GivenAsync("El usuario se encuentra en la página principal", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 18
  await testRunner.WhenAsync("El usuario hace clic en el enlace \"Crea una nueva Cuenta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table35 = new global::Reqnroll.Table(new string[] {
                            "Nombre",
                            "Apellido",
                            "Correo",
                            "Contraseña",
                            "Confirmación"});
                table35.AddRow(new string[] {
                            "Diego",
                            "Rivera",
                            "invalid-email",
                            "diego123",
                            "diego123"});
#line 19
  await testRunner.AndAsync("El usuario llena el formulario con", ((string)(null)), table35, "And ");
#line hidden
#line 22
  await testRunner.AndAsync("El usuario hace clic en el botón \"Crear Cuenta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
  await testRunner.ThenAsync("El campo de correo muestra una validación HTML \"Please include an \'@\' in the emai" +
                        "l address\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de usuario con contraseñas no compatibles")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistroUsuario")]
        [Xunit.TraitAttribute("Description", "Registro de usuario con contraseñas no compatibles")]
        [Xunit.TraitAttribute("Category", "RU_003")]
        public async System.Threading.Tasks.Task RegistroDeUsuarioConContrasenasNoCompatibles()
        {
            string[] tagsOfScenario = new string[] {
                    "RU_003"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de usuario con contraseñas no compatibles", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 27
  await testRunner.GivenAsync("El usuario se encuentra en la página principal", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 28
  await testRunner.WhenAsync("El usuario hace clic en el enlace \"Crea una nueva Cuenta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table36 = new global::Reqnroll.Table(new string[] {
                            "Nombre",
                            "Apellido",
                            "Correo",
                            "Contraseña",
                            "Confirmación"});
                table36.AddRow(new string[] {
                            "Diego",
                            "Rivera",
                            "di_rivera79@gmail.com",
                            "diego123",
                            "diego1234"});
#line 29
  await testRunner.AndAsync("El usuario llena el formulario con", ((string)(null)), table36, "And ");
#line hidden
#line 32
  await testRunner.AndAsync("El usuario hace clic en el botón \"Crear Cuenta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
  await testRunner.ThenAsync("El sistema muestra un mensaje de error \"Las contraseñas no coinciden.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de usuario con contraseña de menos de 8 caracteres")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistroUsuario")]
        [Xunit.TraitAttribute("Description", "Registro de usuario con contraseña de menos de 8 caracteres")]
        [Xunit.TraitAttribute("Category", "RU_004")]
        public async System.Threading.Tasks.Task RegistroDeUsuarioConContrasenaDeMenosDe8Caracteres()
        {
            string[] tagsOfScenario = new string[] {
                    "RU_004"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de usuario con contraseña de menos de 8 caracteres", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 37
  await testRunner.GivenAsync("El usuario se encuentra en la página principal", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 38
  await testRunner.WhenAsync("El usuario hace clic en el enlace \"Crea una nueva Cuenta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table37 = new global::Reqnroll.Table(new string[] {
                            "Nombre",
                            "Apellido",
                            "Correo",
                            "Contraseña",
                            "Confirmación"});
                table37.AddRow(new string[] {
                            "Diego",
                            "Rivera",
                            "di_rivera80@gmail.com",
                            "diego",
                            "diego"});
#line 39
  await testRunner.AndAsync("El usuario llena el formulario con", ((string)(null)), table37, "And ");
#line hidden
#line 42
  await testRunner.AndAsync("El usuario hace clic en el botón \"Crear Cuenta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
  await testRunner.ThenAsync("El sistema muestra un mensaje de error \"La contraseña debe tener al menos 8 carac" +
                        "teres\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de usuario sin información")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistroUsuario")]
        [Xunit.TraitAttribute("Description", "Registro de usuario sin información")]
        [Xunit.TraitAttribute("Category", "RU_005")]
        public async System.Threading.Tasks.Task RegistroDeUsuarioSinInformacion()
        {
            string[] tagsOfScenario = new string[] {
                    "RU_005"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de usuario sin información", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 48
  await testRunner.GivenAsync("El usuario se encuentra en la página principal", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 49
  await testRunner.WhenAsync("El usuario hace clic en el enlace \"Crea una nueva Cuenta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table38 = new global::Reqnroll.Table(new string[] {
                            "Nombre",
                            "Apellido",
                            "Correo",
                            "Contraseña",
                            "Confirmación"});
                table38.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 50
  await testRunner.AndAsync("El usuario llena el formulario con", ((string)(null)), table38, "And ");
#line hidden
#line 53
  await testRunner.AndAsync("El usuario hace clic en el botón \"Crear Cuenta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
  await testRunner.ThenAsync("El campo de nombre muestra una validación HTML \"Please fill out this field\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registro de usuario con nombre incorrecto")]
        [Xunit.TraitAttribute("FeatureTitle", "RegistroUsuario")]
        [Xunit.TraitAttribute("Description", "Registro de usuario con nombre incorrecto")]
        [Xunit.TraitAttribute("Category", "RU_006")]
        public async System.Threading.Tasks.Task RegistroDeUsuarioConNombreIncorrecto()
        {
            string[] tagsOfScenario = new string[] {
                    "RU_006"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de usuario con nombre incorrecto", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 58
  await testRunner.GivenAsync("El usuario se encuentra en la página principal", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 59
  await testRunner.WhenAsync("El usuario hace clic en el enlace \"Crea una nueva Cuenta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table39 = new global::Reqnroll.Table(new string[] {
                            "Nombre",
                            "Apellido",
                            "Correo",
                            "Contraseña",
                            "Confirmación"});
                table39.AddRow(new string[] {
                            "@ \'\' -",
                            "Rivera",
                            "di_rivera81@gmail.com",
                            "diego123",
                            "diego123"});
#line 60
  await testRunner.AndAsync("El usuario llena el formulario con", ((string)(null)), table39, "And ");
#line hidden
#line 63
  await testRunner.AndAsync("El usuario hace clic en el botón \"Crear Cuenta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
  await testRunner.ThenAsync("El sistema muestra un mensaje de error \"El nombre no es valido\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await RegistroUsuarioFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await RegistroUsuarioFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
